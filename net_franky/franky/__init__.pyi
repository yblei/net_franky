"""
Type stubs for net_franky module - provides same interface as franky but over RPyC
"""
from __future__ import annotations
from typing import Any, Callable, overload
import numpy as np
from numpy.typing import NDArray

# You can copy the relevant type definitions from franky._franky.pyi here
# This is a basic template to get started

class Robot:
    def __init__(self, fci_ip: str, realtime_config: str = ..., repeat_on_error: bool = ..., stop_at_python_signal: bool = ...) -> None: ...
    def move(self, motion: Any, asynchronous: bool = ...) -> bool: ...
    def recover_from_errors(self) -> bool: ...
    def stop(self) -> bool: ...
    @property
    def current_pose(self) -> Any: ...
    @property
    def relative_dynamics_factor(self) -> float: ...
    @relative_dynamics_factor.setter
    def relative_dynamics_factor(self, value: float) -> None: ...

class Gripper:
    def __init__(self, fci_ip: str) -> None: ...
    def move(self, width: float, speed: float = ...) -> bool: ...
    def grasp(self, width: float, speed: float = ..., force: float = ..., epsilon_inner: float = ..., epsilon_outer: float = ...) -> bool: ...
    def stop(self) -> bool: ...

class Affine:
    @overload
    def __init__(self, translation: NDArray[np.float64]) -> None: ...
    @overload
    def __init__(self, translation: NDArray[np.float64], quaternion: NDArray[np.float64]) -> None: ...
    @overload
    def __init__(self, matrix: NDArray[np.float64]) -> None: ...
    def __mul__(self, other: Affine) -> Affine: ...
    @property
    def translation(self) -> NDArray[np.float64]: ...
    @property
    def quaternion(self) -> NDArray[np.float64]: ...

class CartesianMotion:
    @overload
    def __init__(self, target: Any) -> None: ...
    @overload
    def __init__(self, target: Any, reference_type: Any) -> None: ...
    @overload
    def __init__(self, target: Any, reference_type: Any, relative_dynamics_factor: float) -> None: ...

class JointMotion:
    @overload
    def __init__(self, target: Any) -> None: ...
    @overload
    def __init__(self, target: Any, relative_dynamics_factor: float) -> None: ...

class ReferenceType:
    Absolute: ReferenceType
    Relative: ReferenceType

class Duration:
    def __init__(self, milliseconds: int) -> None: ...

# Add more classes as needed...